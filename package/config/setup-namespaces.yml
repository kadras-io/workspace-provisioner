#@ load("@ytt:data","data")

#@ image_pull_secret_name = "canonical-registry-credentials"

#@ def is_oci_registry_secret_available():
#@   return data.values.oci_registry.secret.name != "" and data.values.oci_registry.secret.namespace != ""
#@ end

#@ def is_cosign_secret_available():
#@   return data.values.cosign.secret.name != "" and data.values.cosign.secret.namespace != ""
#@ end

#@ def is_git_secret_available():
#@   return data.values.git.server != "" and data.values.git.secret.name != "" and data.values.git.secret.namespace != ""
#@ end

#! SECRET EXPORTS

#@ if/end is_oci_registry_secret_available():
---
apiVersion: secretgen.carvel.dev/v1alpha1
kind: SecretExport
metadata:
  name: #@ data.values.oci_registry.secret.name
  namespace: #@ data.values.oci_registry.secret.namespace
spec:
  toNamespaces:
    #@ for namespace in data.values.namespaces:
    - #@ namespace.name
    #@ end

#@ if/end is_cosign_secret_available():
---
apiVersion: secretgen.carvel.dev/v1alpha1
kind: SecretExport
metadata:
  name: #@ data.values.cosign.secret.name
  namespace: #@ data.values.cosign.secret.namespace
spec:
  toNamespaces:
    #@ for namespace in data.values.namespaces:
    - #@ namespace.name
    #@ end

#@ if/end is_git_secret_available():
---
apiVersion: secretgen.carvel.dev/v1alpha1
kind: SecretExport
metadata:
  name: #@ data.values.git.secret.name
  namespace: #@ data.values.git.secret.namespace
spec:
  toNamespaces:
    #@ for namespace in data.values.namespaces:
    - #@ namespace.name
    #@ end

#! NAMESPACES

#@ for namespace in data.values.namespaces:

---
apiVersion: v1
kind: Namespace
metadata:
  name: #@ namespace.name
  annotations:
    kapp.k14s.io/create-strategy: fallback-on-update

#! Image Pull Placeholder Secret (populated by secretgen-controller)

---
apiVersion: v1
kind: Secret
metadata:
  name: #@ image_pull_secret_name
  namespace: #@ namespace.name
  annotations:
    secretgen.carvel.dev/image-pull-secret: ""
    kapp.k14s.io/create-strategy: fallback-on-update
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: e30K

#! OCI Registry

#@ if/end is_oci_registry_secret_available():
---
apiVersion: secretgen.carvel.dev/v1alpha1
kind: SecretImport
metadata:
  name: #@ data.values.oci_registry.secret.name
  namespace: #@ namespace.name
  annotations:
    kapp.k14s.io/create-strategy: fallback-on-update
spec:
  fromNamespace: #@ data.values.oci_registry.secret.namespace

#! Cosign

#@ if/end is_cosign_secret_available():
---
apiVersion: secretgen.carvel.dev/v1alpha1
kind: SecretImport
metadata:
  name: #@ data.values.cosign.secret.name
  namespace: #@ namespace.name
  annotations:
    kapp.k14s.io/create-strategy: fallback-on-update
spec:
  fromNamespace: #@ data.values.cosign.secret.namespace

#! Git

#@ if/end is_git_secret_available():
---
apiVersion: secretgen.carvel.dev/v1alpha1
kind: SecretImport
metadata:
  name: #@ data.values.git.secret.name
  namespace: #@ namespace.name
  annotations:
    tekton.dev/git-0: #@ data.values.git.server
    kapp.k14s.io/create-strategy: fallback-on-update
spec:
  fromNamespace: #@ data.values.git.secret.namespace

#! RBAC

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: #@ data.values.service_account
  namespace: #@ namespace.name
  annotations:
    kapp.k14s.io/create-strategy: fallback-on-update
secrets:
  #@ if/end is_oci_registry_secret_available():
  - name: #@ data.values.oci_registry.secret.name
  #@ if/end is_git_secret_available():
  - name: #@ data.values.git.secret.name
  #@ if/end is_cosign_secret_available():
  - name: #@ data.values.cosign.secret.name
imagePullSecrets:
  - name: #@ image_pull_secret_name
  #@ if/end is_oci_registry_secret_available():
  - name: #@ data.values.oci_registry.secret.name

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: default-workload
  namespace: #@ namespace.name
  annotations:
    kapp.k14s.io/create-strategy: fallback-on-update
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: workload
subjects:
  - kind: ServiceAccount
    name: #@ data.values.service_account

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: default-deliverable
  namespace: #@ namespace.name
  annotations:
    kapp.k14s.io/create-strategy: fallback-on-update
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: deliverable
subjects:
  - kind: ServiceAccount
    name: #@ data.values.service_account

#@ end
